package com.tester;


import com.tester.User.UsersNotFoundException;
import java.awt.Dialog.ModalExclusionType;
import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.logging.*;
import java.util.prefs.*;
import javax.swing.JPopupMenu.Separator;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.*;
import processing.core.*;

import static com.tester.User.*;
import static java.awt.Component.*;
import static java.lang.System.*;
import static processing.core.PApplet.*;


/**
 * Main GUI Interface for the testing software.
 *
 * @author dhahaj
 */
public class GUIFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1915491974817851497L;
    static GUIFrame frame = null;
    protected static Arduino arduino;
    private static Logger LOGGER = null;
    private static final boolean DEBUG = true;

    private static void DEBUG(Object string) {
        if (DEBUG)
            println(string);
    }

    private MenuEventListener menuEvent;
    protected static String selectedDevice = null;

    /**
     *
     */
    public ButtonEvent buttonEvent;
    private static User thisUser = null;
    private StringBuffer sb = new StringBuffer(300);

    static public Logger getLogger() {
        return LOGGER;
    }

    /**
     * A publicly static instance of the user node preferences.
     */
    private static Preferences prefs;

    /**
     * A string containing the local working directory.
     */
    //protected static String directory = null;
    //protected static String USERPROFILE = null;
    protected static String PROGDATA_DIR = getenv("PROGRAMDATA") + "\\Tester Interface\\";
    private static final String DEFAULT_WORKING_DIR = getenv("PROGRAMDATA") + "\\Tester Interface\\";

    /**
     * Default Constructor.
     */
    @SuppressWarnings({"LeakingThisInConstructor", "Convert2Lambda"})
    public GUIFrame() {
        println("GUIFrame Constructor.");
        println("Data directory = " + PROGDATA_DIR);
        initComponents();

        // Initialize the users
        try {
            User.readUsersFromPreferences();
        } catch (UsersNotFoundException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
            User.setupUsers();
        }
        populateComboBox();

        slider.setValue(getPreferenceInt("SLIDER_VALUE"));
        slider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                slideLabel.setText(slider.getValue() + "%");
                savePreference("SLIDER_VALUE", slider.getValue());
            }
        });

        slideLabel.setText(slider.getValue() + "%");
        textArea.setBackground(new Color(prefs.getInt("BKGD_CLR", Color.GREEN.getRGB())));
        textArea.setForeground(new Color(prefs.getInt("FRGD_CLR", Color.BLACK.getRGB())));
        //miFirmwareFolder.addActionListener(menuEvent);

        try {
            LogControler.FilePath = PROGDATA_DIR + "log";
            LogControler.setup();
            LOGGER.info("Software starting.");
        } catch (IOException ex) {
            LOGGER.throwing(GUIFrame.class.getName(), "Exception in GUIFrame() constructor.", ex);
        }

        if (arduino == null)
            comErrorLabel.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new BindingGroup();

        passwordDialog = new JDialog();
        jPanel6 = new JPanel();
        jLabel2 = new JLabel();
        passwordField = new JPasswordField();
        cancelButton = new JButton();
        okButton = new JButton();
        jLoginWindow = new JFrame();
        jPanel2 = new JPanel();
        jLabel3 = new JLabel();
        jComboBox1 = new JComboBox<>();
        jButton4 = new JButton();
        jPasswordField1 = new JPasswordField();
        jPanel1 = new JPanel();
        jScrollPane1 = new JScrollPane();
        textArea = new JTextArea();
        jSplitPane1 = new JSplitPane();
        leftPanel = new JPanel();
        controlPane = new JTabbedPane();
        testProgramPanel = new JPanel();
        testButton = new JButton();
        pgmButton = new JButton();
        devicePanel = new JPanel();
        jScrollPane = new JScrollPane();
        jDeviceList = new JList<>();
        jButton1 = new JButton();
        speedPanel = new JPanel();
        slider = new JSlider();
        slideLabel = new JLabel();
        jLabel1 = new JLabel();
        settingsPanel = new JPanel();
        btnBackgroundColor = new JButton();
        btnTextColor = new JButton();
        btnExit = new JButton();
        btnClearScreen = new JButton();
        rightPanel = new JPanel();
        loginButton = new JButton();
        userLabel = new JLabel();
        userComboBox = new JComboBox<>();
        deviceLabel = new JLabel();
        comErrorLabel = new JLabel();
        jMenuBar1 = new JMenuBar();
        jMenuFile = new JMenu();
        miQuit = new JMenuItem();
        mnAdmin = new JMenu();
        miSetCOMPort = new JMenuItem();
        miEditConfig = new JMenuItem();
        miManualControl = new JMenuItem();
        miConnectTester = new JMenuItem();
        jSeparator1 = new Separator();
        miAddUser = new JMenuItem();
        miRemoveUser = new JMenuItem();
        jSeparator2 = new Separator();
        miModifyPrefs = new JMenuItem();
        miExploreDir = new JMenuItem();
        miRegistryEdit = new JMenuItem();
        miDeviceManager = new JMenuItem();

        FormListener formListener = new FormListener();

        passwordDialog.setTitle("Login");
        passwordDialog.setAlwaysOnTop(true);
        passwordDialog.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        passwordDialog.setLocation(textArea.getLocation());
        passwordDialog.setMinimumSize(new Dimension(338, 145));
        passwordDialog.setModal(true);
        passwordDialog.setResizable(false);
        passwordDialog.setSize(new Dimension(288, 109));
        passwordDialog.setType(Type.POPUP);

        jPanel6.setMaximumSize(new Dimension(288, 116));
        jPanel6.setMinimumSize(new Dimension(288, 116));

        jLabel2.setFont(new Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabel2.setText("Enter Password:");

        passwordField.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(passwordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .add(10, 10, 10))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(passwordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .add(6, 6, 6))
        );

        cancelButton.setFont(new Font("Tahoma", 0, 18)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(formListener);

        okButton.setFont(new Font("Tahoma", 0, 18)); // NOI18N
        okButton.setText("OK");
        okButton.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout passwordDialogLayout = new org.jdesktop.layout.GroupLayout(passwordDialog.getContentPane());
        passwordDialog.getContentPane().setLayout(passwordDialogLayout);
        passwordDialogLayout.setHorizontalGroup(
            passwordDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(passwordDialogLayout.createSequentialGroup()
                .add(7, 7, 7)
                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(okButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addContainerGap())
        );
        passwordDialogLayout.setVerticalGroup(
            passwordDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(passwordDialogLayout.createSequentialGroup()
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(passwordDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(6, 6, 6))
        );

        jLoginWindow.setMaximumSize(new Dimension(250, 300));
        jLoginWindow.setModalExclusionType(ModalExclusionType.TOOLKIT_EXCLUDE);
        jLoginWindow.setPreferredSize(new Dimension(204, 102));

        Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${defaultCloseOperation}"), jLoginWindow, BeanProperty.create("defaultCloseOperation"));
        bindingGroup.addBinding(binding);

        jPanel2.setMinimumSize(new Dimension(204, 48));
        jPanel2.setPreferredSize(new Dimension(204, 48));
        jPanel2.setLayout(null);

        jLabel3.setFont(new Font("sansserif", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabel3.setText("jLabel3");
        jLabel3.setHorizontalTextPosition(SwingConstants.CENTER);
        jLabel3.setPreferredSize(new Dimension(74, 25));
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 10, 100, 30);

        jComboBox1.setFont(new Font("sansserif", 0, 18)); // NOI18N
        jComboBox1.setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setPreferredSize(new Dimension(85, 26));
        jPanel2.add(jComboBox1);
        jComboBox1.setBounds(120, 10, 85, 30);
        jComboBox1.getAccessibleContext().setAccessibleParent(jLoginWindow);

        jButton4.setFont(new Font("sansserif", 0, 18)); // NOI18N
        jButton4.setText("OK");
        jPanel2.add(jButton4);
        jButton4.setBounds(0, 60, 110, 40);
        jPanel2.add(jPasswordField1);
        jPasswordField1.setBounds(120, 60, 80, 30);

        org.jdesktop.layout.GroupLayout jLoginWindowLayout = new org.jdesktop.layout.GroupLayout(jLoginWindow.getContentPane());
        jLoginWindow.getContentPane().setLayout(jLoginWindowLayout);
        jLoginWindowLayout.setHorizontalGroup(
            jLoginWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLoginWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jLoginWindowLayout.setVerticalGroup(
            jLoginWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLoginWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Tester Interface v2.0.3");
        setIconImage(getIconImage());
        setIconImages(getIconImages());
        setLocation(new Point(20, 20));
        setMinimumSize(new Dimension(1000, 600));
        ResourceBundle bundle = ResourceBundle.getBundle("com/tester/Bundle"); // NOI18N
        setName(bundle.getString("JFrameName")); // NOI18N
        setSize(getPreferredSize());

        binding = Bindings.createAutoBinding(UpdateStrategy.READ_WRITE, this, ELProperty.create("${title}"), this, BeanProperty.create("title"), bundle.getString("Title")); // NOI18N
        binding.setSourceNullValue("Tester Interface ");
        binding.setSourceUnreadableValue("Tester Interface ");
        bindingGroup.addBinding(binding);

        addWindowListener(formListener);

        jPanel1.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        jPanel1.setFocusable(false);
        jPanel1.setPreferredSize(new Dimension(917, 726));

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setFont(new Font("Dialog", 0, 22)); // NOI18N
        textArea.setForeground(Color.green);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setTabSize(2);
        textArea.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(textArea);

        jSplitPane1.setBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)));
        jSplitPane1.setDividerLocation(540);
        jSplitPane1.setDividerSize(20);
        jSplitPane1.setForeground(Color.darkGray);
        jSplitPane1.setResizeWeight(0.25);
        jSplitPane1.setMinimumSize(new Dimension(17, 180));
        jSplitPane1.setPreferredSize(new Dimension(1108, 260));

        leftPanel.setPreferredSize(new Dimension(500, 220));

        controlPane.setBackground(Color.darkGray);
        controlPane.setBorder(BorderFactory.createEtchedBorder());
        controlPane.setForeground(Color.gray);
        controlPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        controlPane.setTabPlacement(JTabbedPane.LEFT);
        controlPane.setFocusCycleRoot(true);
        controlPane.setFont(new Font("Dialog", 0, 22)); // NOI18N
        controlPane.setMinimumSize(new Dimension(420, 41));
        controlPane.setNextFocusableComponent(devicePanel);
        controlPane.setPreferredSize(new Dimension(581, 220));

        testProgramPanel.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        testProgramPanel.setPreferredSize(new Dimension(321, 200));
        testProgramPanel.addInputMethodListener(formListener);

        testButton.setFont(testButton.getFont().deriveFont(testButton.getFont().getStyle() | Font.BOLD, testButton.getFont().getSize()+14));
        testButton.setText("Test");
        testButton.setBorder(new SoftBevelBorder(BevelBorder.RAISED, null, new Color(0, 0, 0), null, null));
        testButton.setEnabled(false);
        testButton.setMinimumSize(new Dimension(50, 30));
        testButton.setPreferredSize(new Dimension(130, 45));
        testButton.addActionListener(formListener);

        pgmButton.setFont(pgmButton.getFont().deriveFont(pgmButton.getFont().getStyle() | Font.BOLD, pgmButton.getFont().getSize()+14));
        pgmButton.setText("Program");
        pgmButton.setBorder(new SoftBevelBorder(BevelBorder.RAISED, null, new Color(0, 0, 0), null, null));
        pgmButton.setEnabled(false);
        pgmButton.setMinimumSize(new Dimension(50, 47));
        pgmButton.setPreferredSize(new Dimension(130, 47));
        pgmButton.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout testProgramPanelLayout = new org.jdesktop.layout.GroupLayout(testProgramPanel);
        testProgramPanel.setLayout(testProgramPanelLayout);
        testProgramPanelLayout.setHorizontalGroup(
            testProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(testProgramPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(testProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pgmButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(testButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        testProgramPanelLayout.setVerticalGroup(
            testProgramPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, testProgramPanelLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(pgmButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(testButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(19, 19, 19))
        );

        controlPane.addTab("Controls", testProgramPanel);

        jScrollPane.setDoubleBuffered(true);
        jScrollPane.setMinimumSize(new Dimension(25, 39));

        jDeviceList.setBorder(BorderFactory.createTitledBorder(""));
        jDeviceList.setFont(new Font("sansserif", 0, 24)); // NOI18N
        jDeviceList.setModel(new AbstractListModel<String>() {
            String[] strings = {"EAX2500", "EAX2503", "EAX2504", "EAX2510", "EAX2513",
                "EAX2514", "EAX2520", "EAX2523", "EAX2524", "EAX2545", "EAX2501"};
            public int getSize() {
                return strings.length;
            }
            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jDeviceList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jDeviceList.setDebugGraphicsOptions(DebugGraphics.NONE_OPTION);
        jDeviceList.setMinimumSize(new Dimension(55, 0));
        jDeviceList.setValueIsAdjusting(true);
        jScrollPane.setViewportView(jDeviceList);

        jButton1.setFont(new Font("Dialog", 0, 24)); // NOI18N
        jButton1.setText("Select\nDevice");
        jButton1.setBorder(BorderFactory.createEtchedBorder());
        jButton1.setBorderPainted(false);
        jButton1.setMinimumSize(new Dimension(80, 37));
        jButton1.setPreferredSize(new Dimension(80, 37));
        jButton1.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout devicePanelLayout = new org.jdesktop.layout.GroupLayout(devicePanel);
        devicePanel.setLayout(devicePanelLayout);
        devicePanelLayout.setHorizontalGroup(
            devicePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(devicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addContainerGap())
        );
        devicePanelLayout.setVerticalGroup(
            devicePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(devicePanelLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(devicePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(10, 10, 10))
        );

        controlPane.addTab("Select Device", devicePanel);

        speedPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));

        slider.setFont(new Font("Dialog", 0, 18)); // NOI18N
        slider.setMajorTickSpacing(25);
        slider.setMinorTickSpacing(5);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setSnapToTicks(true);
        slider.setFocusCycleRoot(true);
        slider.setInverted(true);
        slider.setMinimumSize(new Dimension(10, 53));
        slider.addChangeListener(formListener);
        slider.addInputMethodListener(formListener);
        slider.addVetoableChangeListener(formListener);

        slideLabel.setFont(new Font("Dialog", 0, 28)); // NOI18N
        slideLabel.setText("50%");

        jLabel1.setFont(new Font("Dialog", 0, 28)); // NOI18N
        jLabel1.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabel1.setText("Test Speed: ");
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(SwingConstants.RIGHT);
        jLabel1.setIconTextGap(0);
        jLabel1.setRequestFocusEnabled(false);

        org.jdesktop.layout.GroupLayout speedPanelLayout = new org.jdesktop.layout.GroupLayout(speedPanel);
        speedPanel.setLayout(speedPanelLayout);
        speedPanelLayout.setHorizontalGroup(
            speedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, speedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 169, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(slideLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(speedPanelLayout.createSequentialGroup()
                .add(6, 6, 6)
                .add(slider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        speedPanelLayout.setVerticalGroup(
            speedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(speedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(slider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(speedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(slideLabel))
                .add(30, 30, 30))
        );

        controlPane.addTab("Testing Speed", speedPanel);

        btnBackgroundColor.setFont(new Font("Tahoma", 0, 20)); // NOI18N
        btnBackgroundColor.setText("Background Color Selection");
        btnBackgroundColor.setBorder(deviceLabel.getBorder());
        btnBackgroundColor.setMinimumSize(new Dimension(150, 33));
        btnBackgroundColor.addActionListener(formListener);

        btnTextColor.setFont(new Font("Tahoma", 0, 20)); // NOI18N
        btnTextColor.setText("Text Color Selection");
        btnTextColor.setBorder(deviceLabel.getBorder());
        btnTextColor.setMinimumSize(new Dimension(150, 33));
        btnTextColor.addActionListener(formListener);

        btnExit.setFont(new Font("Tahoma", 0, 20)); // NOI18N
        btnExit.setText("Quit");
        btnExit.setBorder(deviceLabel.getBorder());
        btnExit.addActionListener(formListener);

        btnClearScreen.setFont(new Font("Tahoma", 0, 20)); // NOI18N
        btnClearScreen.setText("Clear Screen");
        btnClearScreen.setBorder(deviceLabel.getBorder());
        btnClearScreen.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout settingsPanelLayout = new org.jdesktop.layout.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, settingsPanelLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(settingsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(settingsPanelLayout.createSequentialGroup()
                        .add(settingsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(btnTextColor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnBackgroundColor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
                        .add(10, 10, 10))
                    .add(settingsPanelLayout.createSequentialGroup()
                        .add(btnClearScreen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(14, 14, 14)
                        .add(btnExit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(settingsPanelLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(btnBackgroundColor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnTextColor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(settingsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnClearScreen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnExit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        controlPane.addTab("Settings", settingsPanel);

        controlPane.setSelectedIndex(1);

        org.jdesktop.layout.GroupLayout leftPanelLayout = new org.jdesktop.layout.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(controlPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, controlPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(leftPanel);

        loginButton.setFont(loginButton.getFont().deriveFont(loginButton.getFont().getStyle() | Font.BOLD, loginButton.getFont().getSize()+14));
        loginButton.setText("Login");
        loginButton.setBorder(deviceLabel.getBorder());
        loginButton.addActionListener(formListener);

        userLabel.setFont(new Font("Dialog", 1, 26)); // NOI18N
        userLabel.setForeground(new Color(236, 60, 73));
        userLabel.setHorizontalAlignment(SwingConstants.LEFT);
        userLabel.setText("Not Logged In");
        userLabel.setAlignmentX(0.5F);
        userLabel.setFocusable(false);
        userLabel.setHorizontalTextPosition(SwingConstants.LEFT);
        userLabel.setIconTextGap(0);
        userLabel.setMaximumSize(new Dimension(245, 40));
        userLabel.setMinimumSize(new Dimension(245, 40));
        userLabel.setPreferredSize(new Dimension(222, 34));

        userComboBox.setBackground(Color.gray);
        userComboBox.setFont(userComboBox.getFont().deriveFont(userComboBox.getFont().getStyle() | Font.BOLD, userComboBox.getFont().getSize()+14));
        userComboBox.setForeground(Color.darkGray);
        userComboBox.setMaximumRowCount(10);
        userComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "" }));
        userComboBox.setSelectedItem(prefs.getInt("USER_INDEX", 0));
        userComboBox.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        userComboBox.setNextFocusableComponent(loginButton);

        deviceLabel.setFont(new Font("Dialog", 1, 26)); // NOI18N
        deviceLabel.setForeground(new Color(236, 60, 73));
        deviceLabel.setHorizontalAlignment(SwingConstants.LEFT);
        deviceLabel.setText("Select a device");
        deviceLabel.setAlignmentX(0.5F);
        deviceLabel.setFocusable(false);
        deviceLabel.setHorizontalTextPosition(SwingConstants.LEFT);
        deviceLabel.setIconTextGap(0);
        deviceLabel.setVerifyInputWhenFocusTarget(false);

        comErrorLabel.setFont(new Font("Dialog", 1, 18)); // NOI18N
        comErrorLabel.setForeground(new Color(236, 60, 73));
        comErrorLabel.setHorizontalAlignment(SwingConstants.CENTER);
        comErrorLabel.setText("COM Error");
        comErrorLabel.setFocusable(false);
        comErrorLabel.setVisible(false);

        org.jdesktop.layout.GroupLayout rightPanelLayout = new org.jdesktop.layout.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, rightPanelLayout.createSequentialGroup()
                .add(6, 6, 6)
                .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(deviceLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(userLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(userComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(loginButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(comErrorLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(rightPanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(deviceLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(loginButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(rightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(userLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(userComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(comErrorLabel))
        );

        deviceLabel.getAccessibleContext().setAccessibleName(bundle.getString("DeviceState")); // NOI18N

        jSplitPane1.setRightComponent(rightPanel);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1152, Short.MAX_VALUE)
                    .add(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 241, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenuBar1.setBorderPainted(false);
        jMenuBar1.setDebugGraphicsOptions(DebugGraphics.NONE_OPTION);
        jMenuBar1.setDoubleBuffered(true);

        jMenuFile.setText("File");
        jMenuFile.setFont(new Font("Dialog", 0, 22)); // NOI18N

        miQuit.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miQuit.setText("Quit");
        miQuit.setHideActionText(true);
        miQuit.setHorizontalAlignment(SwingConstants.LEFT);
        miQuit.setHorizontalTextPosition(SwingConstants.LEFT);
        miQuit.setPreferredSize(new Dimension(118, 33));
        miQuit.addActionListener(formListener);
        jMenuFile.add(miQuit);

        jMenuBar1.add(jMenuFile);

        mnAdmin.setText("Admin");
        mnAdmin.setEnabled(false);
        mnAdmin.setFont(new Font("Dialog", 0, 22)); // NOI18N

        miSetCOMPort.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miSetCOMPort.setText("Set COM Port");
        miSetCOMPort.setHideActionText(true);
        miSetCOMPort.setHorizontalAlignment(SwingConstants.LEFT);
        miSetCOMPort.setHorizontalTextPosition(SwingConstants.LEFT);
        miSetCOMPort.addActionListener(formListener);
        mnAdmin.add(miSetCOMPort);

        miEditConfig.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miEditConfig.setText("Display COM Ports");
        miEditConfig.setHideActionText(true);
        miEditConfig.setHorizontalAlignment(SwingConstants.LEFT);
        miEditConfig.setHorizontalTextPosition(SwingConstants.LEFT);
        miEditConfig.addActionListener(formListener);
        mnAdmin.add(miEditConfig);

        miManualControl.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miManualControl.setText("Manual IO Control");
        miManualControl.setHideActionText(true);
        miManualControl.setHorizontalAlignment(SwingConstants.LEFT);
        miManualControl.setHorizontalTextPosition(SwingConstants.LEFT);
        miManualControl.addActionListener(formListener);
        mnAdmin.add(miManualControl);

        miConnectTester.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miConnectTester.setText("Connect Tester");
        miConnectTester.setEnabled(false);
        miConnectTester.setHideActionText(true);
        miConnectTester.setHorizontalTextPosition(SwingConstants.LEFT);
        miConnectTester.addActionListener(formListener);
        mnAdmin.add(miConnectTester);
        mnAdmin.add(jSeparator1);

        miAddUser.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miAddUser.setText("Add User");
        miAddUser.setHideActionText(true);
        miAddUser.setHorizontalAlignment(SwingConstants.LEFT);
        miAddUser.setHorizontalTextPosition(SwingConstants.LEFT);
        miAddUser.addActionListener(formListener);
        mnAdmin.add(miAddUser);

        miRemoveUser.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miRemoveUser.setText("Remove User");
        miRemoveUser.setHideActionText(true);
        miRemoveUser.setHorizontalAlignment(SwingConstants.LEFT);
        miRemoveUser.setHorizontalTextPosition(SwingConstants.LEFT);
        miRemoveUser.addActionListener(formListener);
        mnAdmin.add(miRemoveUser);
        mnAdmin.add(jSeparator2);

        miModifyPrefs.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miModifyPrefs.setText("Modify Prefs");
        miModifyPrefs.setHideActionText(true);
        miModifyPrefs.setHorizontalAlignment(SwingConstants.LEFT);
        miModifyPrefs.setHorizontalTextPosition(SwingConstants.LEFT);
        miModifyPrefs.addActionListener(formListener);
        mnAdmin.add(miModifyPrefs);

        miExploreDir.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miExploreDir.setText("Explore Directory");
        miExploreDir.setHideActionText(true);
        miExploreDir.setHorizontalAlignment(SwingConstants.LEFT);
        miExploreDir.setHorizontalTextPosition(SwingConstants.LEFT);
        miExploreDir.addActionListener(formListener);
        mnAdmin.add(miExploreDir);

        miRegistryEdit.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miRegistryEdit.setText("Registry Edit");
        miRegistryEdit.setHideActionText(true);
        miRegistryEdit.setHorizontalAlignment(SwingConstants.LEFT);
        miRegistryEdit.setHorizontalTextPosition(SwingConstants.LEFT);
        miRegistryEdit.addActionListener(formListener);
        mnAdmin.add(miRegistryEdit);

        miDeviceManager.setFont(new Font("Dialog", 0, 22)); // NOI18N
        miDeviceManager.setText("Device Manager");
        miDeviceManager.setHideActionText(true);
        miDeviceManager.setHorizontalAlignment(SwingConstants.LEFT);
        miDeviceManager.setHorizontalTextPosition(SwingConstants.LEFT);
        miDeviceManager.addActionListener(formListener);
        mnAdmin.add(miDeviceManager);

        jMenuBar1.add(mnAdmin);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1164, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 818, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        setSize(new Dimension(1182, 900));
        setLocationRelativeTo(null);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements ActionListener, InputMethodListener, WindowListener, VetoableChangeListener, ChangeListener {
        FormListener() {}
        public void actionPerformed(ActionEvent evt) {
            if (evt.getSource() == testButton) {
                GUIFrame.this.testButtonActionPerformed(evt);
            }
            else if (evt.getSource() == pgmButton) {
                GUIFrame.this.pgmButtonActionPerformed(evt);
            }
            else if (evt.getSource() == jButton1) {
                GUIFrame.this.setDeviceActionPerformed(evt);
            }
            else if (evt.getSource() == btnBackgroundColor) {
                GUIFrame.this.btnBackgroundColorActionPerformed(evt);
            }
            else if (evt.getSource() == btnTextColor) {
                GUIFrame.this.btnTextColorActionPerformed(evt);
            }
            else if (evt.getSource() == btnExit) {
                GUIFrame.this.btnExitActionPerformed(evt);
            }
            else if (evt.getSource() == btnClearScreen) {
                GUIFrame.this.btnClearScreenActionPerformed(evt);
            }
            else if (evt.getSource() == loginButton) {
                GUIFrame.this.loginButtonActionPerformed(evt);
            }
            else if (evt.getSource() == passwordField) {
                GUIFrame.this.passwordFieldActionPerformed(evt);
            }
            else if (evt.getSource() == cancelButton) {
                GUIFrame.this.cancelButtonActionPerformed(evt);
            }
            else if (evt.getSource() == okButton) {
                GUIFrame.this.okButtonActionPerformed(evt);
            }
            else if (evt.getSource() == miQuit) {
                GUIFrame.this.miQuitActionPerformed(evt);
            }
            else if (evt.getSource() == miSetCOMPort) {
                GUIFrame.this.miSetCOMPortActionPerformed(evt);
            }
            else if (evt.getSource() == miEditConfig) {
                GUIFrame.this.miEditConfigActionPerformed(evt);
            }
            else if (evt.getSource() == miManualControl) {
                GUIFrame.this.miManualControlActionPerformed(evt);
            }
            else if (evt.getSource() == miConnectTester) {
                GUIFrame.this.miConnectTesterActionPerformed(evt);
            }
            else if (evt.getSource() == miAddUser) {
                GUIFrame.this.miAddUserActionPerformed(evt);
            }
            else if (evt.getSource() == miRemoveUser) {
                GUIFrame.this.miRemoveUserActionPerformed(evt);
            }
            else if (evt.getSource() == miModifyPrefs) {
                GUIFrame.this.miModifyPrefsActionPerformed(evt);
            }
            else if (evt.getSource() == miExploreDir) {
                GUIFrame.this.miExploreDirActionPerformed(evt);
            }
            else if (evt.getSource() == miRegistryEdit) {
                GUIFrame.this.miRegistryEditActionPerformed(evt);
            }
            else if (evt.getSource() == miDeviceManager) {
                GUIFrame.this.miDeviceManagerActionPerformed(evt);
            }
        }

        public void caretPositionChanged(InputMethodEvent evt) {
            if (evt.getSource() == testProgramPanel) {
                GUIFrame.this.testProgramPanelCaretPositionChanged(evt);
            }
            else if (evt.getSource() == slider) {
                GUIFrame.this.sliderEvent(evt);
            }
        }

        public void inputMethodTextChanged(InputMethodEvent evt) {
        }

        public void windowActivated(WindowEvent evt) {
        }

        public void windowClosed(WindowEvent evt) {
            if (evt.getSource() == GUIFrame.this) {
                GUIFrame.this.formWindowClosed(evt);
            }
        }

        public void windowClosing(WindowEvent evt) {
            if (evt.getSource() == GUIFrame.this) {
                GUIFrame.this.formWindowClosing(evt);
            }
        }

        public void windowDeactivated(WindowEvent evt) {
        }

        public void windowDeiconified(WindowEvent evt) {
        }

        public void windowIconified(WindowEvent evt) {
        }

        public void windowOpened(WindowEvent evt) {
        }

        public void vetoableChange(PropertyChangeEvent evt)throws PropertyVetoException {
            if (evt.getSource() == slider) {
                GUIFrame.this.sliderVetoableChange(evt);
            }
        }

        public void stateChanged(ChangeEvent evt) {
            if (evt.getSource() == slider) {
                GUIFrame.this.sliderStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Programming Button Event Handler. Will start execution of a
     * <i>Runnable</i> instance which will open the quickwriter software,
     * passing along arguments for the hex file location, and for auto running
     * and auto exiting, returning a value of 0 for successful programming, and
     * a non-zero value for diagnosing the failed event.
     *
     * @param evt The originating event called by the Programming
     * <i>Button</i>.
     */
    private void pgmButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_pgmButtonActionPerformed

        pgmButton.setEnabled(false);
        testButton.setEnabled(false);

        if (GUIFrame.getArduino() == null) {
            JOptionPane.showMessageDialog(this, "Not connected to the tester!");
            pgmButton.setEnabled(true);
            testButton.setEnabled(true);
            return;
        }

        // Power on the QW 
        arduino.mode(RunTest.Pins.QW_RELAY.pin, Arduino.OUTPUT);
        arduino.dWrite(RunTest.Pins.QW_RELAY.pin, Arduino.HIGH);

        sleep(650);
        String deviceSelection = deviceLabel.getText();

        // Make sure a device has been selected and ensure only one instance is of the programming software is active.
        if (!deviceSelection.contains("EAX25")) {
            showErrorDialog("Device not selected");
            pgmButton.setEnabled(true);
            testButton.setEnabled(true);
            return;
        } else if (RunProgramming.isRunning()) {
            showErrorDialog("Program already running!");
            pgmButton.setEnabled(true);
            testButton.setEnabled(true);
            return;
        }

        String loc = prefs.get("FIRMWARE_DIR" + "QWControl.QWC", "");
        int returnValue = RunProgramming.run(loc);
        if (returnValue != 0) {
            JOptionPane.showMessageDialog(frame, "Programming Failed. Returned: 0x"
                    + PApplet.hex(returnValue, 4) + "\nError: "
                    + QWErrorMessage.evalResult(returnValue), "Error",
                    JOptionPane.ERROR_MESSAGE);
            LogControler.getLogger().log(Level.WARNING, "Error programming ({0}), "
                    + "Firmware " + GUIFrame.selectedDevice + ", Exit value="
                    + returnValue + ", Message="
                    + QWErrorMessage.evalResult(returnValue), selectedDevice);
        } else
            LogControler.getLogger().log(Level.INFO, "Device Programmed ({0})",
                    selectedDevice);

        pgmButton.setEnabled(true);
        testButton.setEnabled(true);

        // Turn off the QW
        GUIFrame.arduino.dWrite(RunTest.Pins.QW_RELAY.pin, Arduino.LOW);
    }//GEN-LAST:event_pgmButtonActionPerformed

    /**
     * Helper function to add a delay.
     *
     * @param ms The delay time in milliseconds.
     */
    public static void sleep(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ex) {
            Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Testing Button Event Handler. Will start the timer located in the
     * <b>Test</b> class, which will begin the testing on the device.
     *
     * @param evt The originating event called by the Test <i>Button</i>.
     */
    private void testButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        if (arduino == null) {
            JOptionPane.showMessageDialog(this, "Not connected to the tester!");
            return;
        }
        sleep(75);
        if (RunTest.waiting) {
            RunTest.waiting = false;
            return;
        }
        if (!RunTest.running) {
            RunTest rt = new RunTest(GUIFrame.this, arduino);
            rt.start();
            testButton.setEnabled(false);
            pgmButton.setEnabled(false);
        }
    }//GEN-LAST:event_testButtonActionPerformed

    private void loginButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        println(evt.getActionCommand());
        if (thisUser == null) {
            passwordDialog.setLocation(frame.getLocation().x + 200, (frame.getLocation().y) + 350);
            passwordDialog.setVisible(true);
            LogControler.USER = thisUser;
            try {
                if (thisUser.isAdmin())
                    mnAdmin.setEnabled(true);
            } catch (Exception e) {
            }
            LOGGER.info("User Login Event");
        } else {
            LOGGER.info("User Logout Event");
            LogControler.USER = null;
            thisUser = null;
            userLabel.setText("Not Logged In");
            userLabel.setForeground(Color.RED);
            pgmButton.setEnabled(false);
            testButton.setEnabled(false);
            loginButton.setText("Login");
            mnAdmin.setEnabled(false);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void sliderEvent(InputMethodEvent evt) {//GEN-FIRST:event_sliderEvent
        slideLabel.setText(slider.getValue() + "%");
        savePreference("SLIDER_VALUE", slider.getValue());
    }//GEN-LAST:event_sliderEvent

    private void miQuitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miQuitActionPerformed
        confirmExit(true);
    }//GEN-LAST:event_miQuitActionPerformed

    private void formWindowClosed(WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        System.out.println(evt.paramString()); }//GEN-LAST:event_formWindowClosed

    private void miManualControlActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miManualControlActionPerformed
        ManualWindow mw = new ManualWindow("Manual Control");
        mw.setVisible(true);
    }//GEN-LAST:event_miManualControlActionPerformed

    private void setDeviceActionPerformed(ActionEvent evt) {//GEN-FIRST:event_setDeviceActionPerformed
        String name = jDeviceList.getSelectedValue();
        if (name == null)
            return;
        deviceLabel.setText(name);
        selectedDevice = name;
        if (name.equalsIgnoreCase("EAX2500")) {
            Color c = new Color(-16728503);
            deviceLabel.setForeground(c);
        } else
            deviceLabel.setForeground(Color.RED);
        LogControler.getLogger().info(String.format("Device: %s", name));
        showInstructions();
        controlPane.setSelectedIndex(0);
    }//GEN-LAST:event_setDeviceActionPerformed

    private void testProgramPanelCaretPositionChanged(InputMethodEvent evt) {//GEN-FIRST:event_testProgramPanelCaretPositionChanged
        System.out.println("Method: jPanel2CaretPositionChanged\n\t" + evt.getSource().toString());
    }//GEN-LAST:event_testProgramPanelCaretPositionChanged

    private void sliderVetoableChange(PropertyChangeEvent evt) throws java.beans.PropertyVetoException {//GEN-FIRST:event_sliderVetoableChange
        JSlider js = (JSlider) evt.getSource();
        System.out.println("Method: jPanel2CaretPositionChanged\n\t" + js.getValue() + "\n");
        savePreference("SLIDER_VALUE", js.getValue());
    }//GEN-LAST:event_sliderVetoableChange

    private void sliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        JSlider jSlider = (JSlider) evt.getSource();
        prefs.putInt("SLIDER_VALUE", jSlider.getValue());
        try {
            prefs.sync();
            prefs.flush();
        } catch (BackingStoreException exc) {
            Logger.getAnonymousLogger().severe(exc.getLocalizedMessage());
        }
    }//GEN-LAST:event_sliderStateChanged

    private void btnBackgroundColorActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnBackgroundColorActionPerformed
        Color c = showAndGetColor("Choose Background Color", textArea.getBackground());
        if (c != null) {
            textArea.setBackground(c);
            savePreference("BKGD_CLR", c.getRGB());
        }
    }//GEN-LAST:event_btnBackgroundColorActionPerformed

    private void btnTextColorActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnTextColorActionPerformed
        Color c = showAndGetColor("Choose Text Color", Color.black);
        if (c != null) {
            textArea.setForeground(c);
            savePreference("FRGD_CLR", c.getRGB());
        }
    }//GEN-LAST:event_btnTextColorActionPerformed

    private void btnClearScreenActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnClearScreenActionPerformed
        textArea.setText("");
    }//GEN-LAST:event_btnClearScreenActionPerformed

    private void btnExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        confirmExit(true);
    }//GEN-LAST:event_btnExitActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        passwordDialog.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void passwordFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        println(evt.getActionCommand());
        verifyPassword();
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        verifyPassword();
    }//GEN-LAST:event_okButtonActionPerformed

    private void miEditConfigActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miEditConfigActionPerformed
        String[] ports = Serial.list();
        String currentPort = prefs.get("COM_PORT", "null");
        String msg = "";
        for (String s : ports)
            msg += "  -" + s + "\n";
        msg += "\nSelected COM Port:\n" + "  -" + currentPort;
        int i = JOptionPane.showConfirmDialog(rootPane, "Available COM Ports:\n" + msg, "Info", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);

        //    ProcessBuilder pb = new ProcessBuilder("devmgmt.msc", "");
        //    println(pb.directory());
        //    try {
        //      pb.start();
        //    } catch (IOException ex) {
        //      Logger.getLogger(GUIFrame.class.getName()).log(Level.SEVERE, null, ex);
        //    }
    }//GEN-LAST:event_miEditConfigActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmExit(false);
    }//GEN-LAST:event_formWindowClosing

    private void miSetCOMPortActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miSetCOMPortActionPerformed
        String com = JOptionPane.showInputDialog(frame, "Enter COM Port (i.e. COMx)", "Set COM Port", JOptionPane.QUESTION_MESSAGE);
        println("Entered: " + com);
        if (com == null)
            return;

        try {
            int i = Integer.parseInt(com, 10);
            com = "COM" + i;
            savePreference("COM_PORT", com);
        } catch (NumberFormatException e) {
            showErrorDialog("invalid entry!");
            return;
        }
        JOptionPane.showMessageDialog(this, "Restart to connect the tester.", "Info", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_miSetCOMPortActionPerformed

    private void miConnectTesterActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miConnectTesterActionPerformed
        connectArduino(prefs.get("COM_PORT", null));
    }//GEN-LAST:event_miConnectTesterActionPerformed

    private static void populateComboBox() {
        userComboBox.removeAllItems();
        Iterator<User> users = userList.iterator();
        while (users.hasNext())
            userComboBox.addItem(users.next().getUsername());
    }

    private void miAddUserActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miAddUserActionPerformed
        final JTextField jtf = new JTextField();
        final JPasswordField pwd = new JPasswordField(10);
        final JPanel panel = new JPanel(new GridLayout(3, 3));
        final JCheckBox jcb = new JCheckBox();
        panel.add(new JLabel("Username:"));
        panel.add(jtf);
        panel.add(new JLabel("Password:"));
        panel.add(pwd);
        panel.add(new JLabel("Admin"));
        panel.add(jcb);
        int action = JOptionPane.showConfirmDialog(frame, panel, "LOGIN", JOptionPane.OK_CANCEL_OPTION);
        if (action == JOptionPane.OK_OPTION) {
            String name = jtf.getText();
            char[] pass = pwd.getPassword();
            String password = Helpers.char2String(pass);
            if (name == null || password == null) {
                showErrorDialog("Fields Cannot be empty!");
                return;
            }
            User.addUser(name, password, jcb.isSelected());
            //User.saveUserFile();
            userComboBox.removeAllItems();
            userList.forEach((_u) -> {
                userComboBox.addItem(_u.getUsername());
            });
        }
    }//GEN-LAST:event_miAddUserActionPerformed

    private void miModifyPrefsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miModifyPrefsActionPerformed
        String[] args = {"notepad++.exe", prefs.get("WORKING_DIR", null) + "prefs.xml"};
        PApplet.launch(args);
        append("Reload software to reflect changes to the preferences configuration.");
    }//GEN-LAST:event_miModifyPrefsActionPerformed

    private void miExploreDirActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miExploreDirActionPerformed
        String[] args = {"explorer", prefs.get("WORKING_DIR", DEFAULT_WORKING_DIR)};
        PApplet.launch(args);
    }//GEN-LAST:event_miExploreDirActionPerformed

    private void miRemoveUserActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miRemoveUserActionPerformed
        JComboBox<String> box = new JComboBox<>(User.getUserNames());
        final JPanel panel = new JPanel(new GridLayout(1, 1));
        panel.add(new JLabel("Select User:"));
        panel.add(box);
        int action = JOptionPane.showConfirmDialog(frame, panel, "Remove User", JOptionPane.OK_CANCEL_OPTION);
        if (action == JOptionPane.OK_OPTION) {
            User.removeUser(User.getUser((String) box.getSelectedItem()));
            populateComboBox();
        }
    }//GEN-LAST:event_miRemoveUserActionPerformed

    private void miRegistryEditActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miRegistryEditActionPerformed
        PApplet.launch("regedit");
    }//GEN-LAST:event_miRegistryEditActionPerformed

    private void miDeviceManagerActionPerformed(ActionEvent evt) {//GEN-FIRST:event_miDeviceManagerActionPerformed
        PApplet.launch("devmgmt.msc");
    }//GEN-LAST:event_miDeviceManagerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        println("Main method");
        //showYesNoDialog(PROGDATA_DIR);
        LOGGER = LogControler.getLogger();

        prefs = Preferences.userNodeForPackage(GUIFrame.class);

        try {
            Path p = Paths.get(PROGDATA_DIR + "prefs.xml");
            Preferences.importPreferences(new FileInputStream(p.toFile()));
        } catch (IOException | InvalidPreferencesFormatException ex) {
            LOGGER.log(Level.WARNING, "Error importing preferences.", ex);
            System.err.println(ex.getCause());
            JOptionPane.showMessageDialog(frame, "Error Reading preference file!", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }

        try {
            String savedCom = prefs.get("COM_PORT", null);
            DEBUG("Stored COM Port = " + savedCom);
            if (savedCom != null) {
                String[] ports = Serial.list();
                if (!Arrays.asList(ports).contains(savedCom)) {
                    println(savedCom + " not found!");
                    GUIFrame.arduino = null;
                } else
                    GUIFrame.arduino = new Arduino(frame, savedCom, 57600);
            }
        } catch (Exception e) {
            GUIFrame.arduino = null;
            System.err.println(e);
        }

        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                println(info.getName());
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }

//        java.awt.EventQueue.invokeLater(() -> {  
        frame = new GUIFrame();

        if (GUIFrame.arduino == null)
            comErrorLabel.setVisible(true);
        else
            comErrorLabel.setVisible(false);

        // Add all the usernames to the combobox component
        populateComboBox();

        // Restore the last selected user
        try {
            userComboBox.setSelectedIndex(getPreferenceInt("USER_INDEX"));
        } catch (Exception e) {
            userComboBox.setSelectedIndex(0);
        }

        // Register an action listener for changes to the combobox
        userComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                String cmd = evt.getActionCommand();
                println(evt.getActionCommand());
                if (cmd.equals("comboBoxChanged")) {
                    JComboBox cb = (JComboBox) evt.getSource();
                    cb.setAlignmentY(CENTER_ALIGNMENT);
                    if (cb.getItemCount() > 0) {
                        int index = cb.getSelectedIndex();
                        if (index != getPreferenceInt("USER_INDEX"))
                            savePreference("USER_INDEX", index);
                    }
                }
            }
        });
        frame.setVisible(true);
//        });
    }

    public boolean connectArduino(String port) {
        println("connecting to: " + port);
        if (port == null)
            return false;
        //        else {
        //            try {
        //                int i = Integer.parseInt(port);
        //                port = "COM" + i;
        //            } catch (NumberFormatException ex) {
        //                System.err.println(ex.getMessage());
        //                return false;
        //            }
        //        }
        // 

        if (GUIFrame.arduino == null) {
            println("connecting to arduino.");
            java.util.List portList = Arrays.asList(Serial.list());
            if (portList.contains(port)) {
                println("Port found.");
                try {
                    append("Connecting...");
                    comErrorLabel.setVisible(false);
                    Arduino _arduino = new Arduino(frame, port);
                    GUIFrame.arduino = _arduino;
                } catch (Exception e) {
                    GUIFrame.arduino = null;
                    comErrorLabel.setVisible(true);
                    showErrorDialog("Exception connecting to tester:\n" + e.getLocalizedMessage());
                }
            } else {
                showErrorDialog(port + " Not Found! Fix COM port settings.");
                GUIFrame.arduino = null;
                comErrorLabel.setVisible(true);
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton btnBackgroundColor;
    JButton btnClearScreen;
    JButton btnExit;
    JButton btnTextColor;
    JButton cancelButton;
    public static JLabel comErrorLabel;
    JTabbedPane controlPane;
    public JLabel deviceLabel;
    JPanel devicePanel;
    JButton jButton1;
    JButton jButton4;
    JComboBox<String> jComboBox1;
    public JList<String> jDeviceList;
    JLabel jLabel1;
    JLabel jLabel2;
    JLabel jLabel3;
    JFrame jLoginWindow;
    JMenuBar jMenuBar1;
    JMenu jMenuFile;
    JPanel jPanel1;
    JPanel jPanel2;
    JPanel jPanel6;
    JPasswordField jPasswordField1;
    JScrollPane jScrollPane;
    JScrollPane jScrollPane1;
    Separator jSeparator1;
    Separator jSeparator2;
    public JSplitPane jSplitPane1;
    JPanel leftPanel;
    public JButton loginButton;
    public JMenuItem miAddUser;
    public JMenuItem miConnectTester;
    public JMenuItem miDeviceManager;
    public JMenuItem miEditConfig;
    public JMenuItem miExploreDir;
    public JMenuItem miManualControl;
    public JMenuItem miModifyPrefs;
    public JMenuItem miQuit;
    public JMenuItem miRegistryEdit;
    public JMenuItem miRemoveUser;
    public JMenuItem miSetCOMPort;
    JMenu mnAdmin;
    JButton okButton;
    private JDialog passwordDialog;
    JPasswordField passwordField;
    public JButton pgmButton;
    JPanel rightPanel;
    JPanel settingsPanel;
    public JLabel slideLabel;
    public JSlider slider;
    JPanel speedPanel;
    public JButton testButton;
    JPanel testProgramPanel;
    public static JTextArea textArea;
    public static JComboBox<String> userComboBox;
    public JLabel userLabel;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Appends a line onto the textArea component content.
     *
     * @param s The String to append.
     */
    public void append(String s) {
        sb.append(s);
        sb.append("\n");
        printText();
    }

    /**
     * Set the text on the main interface.
     */
    private void printText() {
        textArea.setText(sb.toString());
    }

    /**
     * Clears the screen and the text buffer.
     *
     */
    public void clearScreen() {
        sb = new StringBuffer(300);
        textArea.setText("");
    }

    /**
     * Displays a popup dialog displaying an error message;
     *
     * @param message The error message to display in the dialog window.
     */
    private void showErrorDialog(String message) {
        JOptionPane.showMessageDialog(getWindows()[0], message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Checks the password for the current User.
     *
     */
    private void verifyPassword() {
        if (thisUser != null) { // Perform a logout
            userLabel.setText("Not Logged In");
            userLabel.setForeground(Color.RED);
            loginButton.setText("Login");
            pgmButton.setEnabled(false);
            testButton.setEnabled(false);
            thisUser = null;
            passwordDialog.setVisible(false);
            mnAdmin.setEnabled(false);
        } else { // Perform a login 
            String enteredPassword = new String(passwordField.getPassword());
            passwordField.setText("");
            String username = (String) userComboBox.getSelectedItem();
            User u = User.getUser(username);
            println(u);
            if (u.verifyPassword(enteredPassword)) {
                String s = (String) userComboBox.getSelectedItem();
                Color c = new Color(-16728503);
                userLabel.setForeground(c);
                userLabel.setText("Logged in as " + s);
                loginButton.setText("Logout");
                pgmButton.setEnabled(true);
                testButton.setEnabled(true);
                thisUser = u;
                passwordDialog.setVisible(false);
                LogControler.USER = thisUser;
                mnAdmin.setEnabled(thisUser.isAdmin());
            } else {
                JOptionPane.showMessageDialog(GUIFrame.this, "Incorrect Password!");
                thisUser = null;
                passwordDialog.setVisible(false);
                LogControler.USER = thisUser;
                sleep(25);
                loginButton.doClick(5);
            }
        }
    }

    /**
     * Gets the current user instance.
     *
     * @return The Current User.
     */
    public static User getUser() {
        return thisUser;
    }

    void registerMethod(String method, Serial serial) {
        println(method + " " + serial);
    }

    /**
     * Interface to the control buttons
     */
    public interface ButtonEvent extends ActionListener {

        @Override
        public default void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JButton)
                if (((JButton) e.getSource()).getText().equalsIgnoreCase("login")) {
                }
        }


    }

    /**
     * @see ActionListener
     * @param al The ActionListener to add.
     */
    public void addButtonListener(ActionListener al) {
        testButton.addActionListener(al);
        pgmButton.addActionListener(al);
        loginButton.addActionListener(al);
        miQuit.addActionListener(al);
    }

    /**
     * Sets the userMap for the combo box selection
     *
     * @param names A List containing Strings of user names.
     */
    public void setUsers(ArrayList names) {
        userComboBox.removeAllItems();
        for (int i = 0; i < names.size(); i++)
            userComboBox.addItem((String) names.get(i));
    }

    /**
     * Helper method for displaying a Yes/No dialog.
     *
     * @param msg The Message to display.
     *
     * @return An integer of either JOptionPane.YES_OPTION,
     * JOptionPane.NO_OPTION OR JOptionPane.CANCEL_OPTION
     */
    public static int showYesNoDialog(String msg) {
        return JOptionPane.showConfirmDialog(null, msg, "Confirm", JOptionPane.YES_NO_OPTION);
    }

    /**
     * Helper method for confirming a window closing event.
     */
    private void confirmExit(boolean par) {
        if (par)
            doExit();
        int i = JOptionPane.showConfirmDialog(rootPane, "Close Software?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (i == JOptionPane.YES_OPTION) {
            doExit();;
        }
    }

    private void doExit() {
        try {
            prefs.sync();
            prefs.flush();
        } catch (BackingStoreException e) {
            LOGGER.log(Level.SEVERE, "BackingStoreException - sync and flushing prefs", e);
        }
        Helpers.exportPrefs(PROGDATA_DIR + "prefs.xml", prefs);
        if (arduino != null)
            arduino.dispose();
        LOGGER.info("Software Closed");
        passwordDialog.dispose();
        dispose();
        System.exit(0);
    }

    /**
     * Display the instructions inside the TextArea.
     */
    public void showInstructions() {
        println("Showing instructions.");

        // Fetch the instructions from the compiled resources
        InputStream is = getClass().getResourceAsStream("/instructions.txt");
        try {
            sb.replace(0, sb.length(), Helpers.readInputStream(is));
            printText();
        } catch (IOException ex) {
            err.println(ex.getMessage());
        }
    }

    /**
     * Displays a color chooser dialog.
     *
     * @param title The title for the dialog.
     * @param initialColor The initial <b>Color</b> to show.
     *
     * @return The selected <b>Color</b>
     */
    private Color showAndGetColor(String title, Color initialColor) {
        return JColorChooser.showDialog(this, title, initialColor);
    }

    /**
     * Sets a key in the preferences file.
     *
     * @param key The Key name.
     * @param value The Key's value.
     */
    public static void savePreference(String key, Object value) {
        if (value instanceof Integer) {
            Integer v = (Integer) value;
            println("Saving Preference Integer: " + key + ":" + v);
            prefs.putInt(key, (int) value);
        } else if (value instanceof String) {
            println("Saving Preference String");
            prefs.put(key, (String) value);
        } else
            throw new IllegalArgumentException("Preference is of an incompatiable type");
        try {
            prefs.flush();
            prefs.sync();
        } catch (BackingStoreException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Get a key values from the preferences file.
     *
     * @param key The key name
     *
     * @return The value associated with the key.
     */
    public static String getPreferenceString(String key) {
        return prefs.get(key, null);
    }

    /**
     * Get a an integer value from the user's preferences.
     *
     * @param key The key name
     *
     * @return The value associated with the key
     */
    public static int getPreferenceInt(String key) {
        return prefs.getInt(key, 0);
    }

    /**
     * Check a key value in the Preferences instance.
     *
     * @param key The key name.
     *
     * @return True if this Preferences contains the key value.
     *
     */
    public static boolean containsPreference(String key) {
        try {
            java.util.List<String> list = Arrays.asList(prefs.keys());
            return list.contains(key);
        } catch (BackingStoreException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
        return false;
    }

    /**
     * Gets the user root node preferences used in this class.
     *
     * @return The preferences.
     */
    public static Preferences getPreferences() {
        return prefs;
    }

    /**
     *
     * @param which A serial object.
     */
    public void serialEvent(Serial which) {
        println("Serial Event: " + which.toString());
    }

    /**
     * Serial Error.
     *
     * @param which A Serial Object.
     */
    public void serialError(Object which) {
        println("Serial Error: " + which.toString());
    }

    /**
     *
     * @param which A Serial Object.
     */
    public void serialAvailable(Object which) {
        println("Serial Available: " + which.toString());
    }

    /**
     * Returns the current arduino instance.
     *
     * @return An Arduino instance.
     */
    static public Arduino getArduino() {
        return arduino;
    }

    private class MenuEventListener implements ActionListener {

        public MenuEventListener() {
            super();
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();
            println("MenuEventListener: command=" + command);
            if ("Set Firmware Folder".equals(command)) {
                //Preferences p = Preferences.userRoot();
                JFileChooser fc = new JFileChooser();
                fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                fc.setDialogTitle("Select Firmware Directory");
                String firm_path = GUIFrame.getPreferences().get("FIRMWARE_DIR", new File("").getAbsolutePath());
                fc.setCurrentDirectory(new File(firm_path));
                fc.setFont(new Font(Font.DIALOG, Font.BOLD, 30));
                fc.setSize(800, 600);
                fc.updateUI();
                fc.grabFocus();
                fc.setPreferredSize(new Dimension(800, 600));
                int i = fc.showDialog(rootPane, "OK");
                if (i == JFileChooser.APPROVE_OPTION) {
                    String dir = fc.getSelectedFile().getAbsolutePath();
                    println("Firmware Folder = " + dir);
                    savePreference("FIRMWARE_DIR", dir + "\\");
                }
            }
        }


    }

    private void setPreferences(Path p) {
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(p.toFile());
            Preferences.importPreferences(fis);
        } catch (FileNotFoundException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (IOException | InvalidPreferencesFormatException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        } finally {
            try {
                fis.close();
            } catch (IOException ex) {
                LOGGER.log(Level.SEVERE, null, ex);
            }
        }
    }


}
